import Head from "next/head";
import { unstable_getServerSession } from "next-auth/next";
import { authOptions } from "./api/auth/[...nextauth]";
import { GetServerSideProps } from "next";
import { Session } from "next-auth";
import Image from "next/image";
import { signOut } from "next-auth/react";
import { useState } from "react";

interface Props {
  session: Session;
}

export default function Home({ session }: Props) {
  const [index] = useState(session?.user?.email?.indexOf("@") || 0);
  const myLoader = ({ src }: { src: string }) => {
    return src;
  };

  return (
    <div>
      <Head>
        <title>Create Next App</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <main className="flex flex-col justify-center items-center gap-y-2">
        <h1 className="py-4 text-3xl font-bold text-center">NextAuth</h1>
        <h2 className="text-center text-4xl font-bold">
          {session.user?.name === undefined
            ? session.user?.email?.slice(0, index)
            : session.user?.name}
        </h2>
        <Image
          loader={myLoader}
          src={
            session.user?.image === undefined
              ? "https://cdn-icons-png.flaticon.com/128/64/64572.png"
              : (session.user?.image as string)
          }
          height={120}
          width={120}
          alt="image"
          className="rounded-full bg-white"
          unoptimized={true}
        />
        <button
          className="px-4 py-1 bg-red-600 text-white font-bold rounded"
          onClick={() => signOut({ callbackUrl: "/signin" })}
        >
          Sign Out
        </button>
      </main>
    </div>
  );
}

export const getServerSideProps: GetServerSideProps = async ({ req, res }) => {
  const session = await unstable_getServerSession(req, res, authOptions);

  if (!session) {
    return {
      redirect: {
        destination: "/signin",
        permanent: false,
      },
    };
  }
  return {
    props: {
      session,
    },
  };
};
